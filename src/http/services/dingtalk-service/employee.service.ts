/**
 * This file is generated by the RequestConfigGenerator.
 * Do not edit.
 */
import { Request, RequestParams } from '@gopowerteam/http-request'
import type { Observable } from 'rxjs'
import { EmployeeController } from '../../controller/dingtalk-service/employee.controller'

export class EmployeeService {
    /**
     * 查询全部员工(在职)
     */
    @Request({
        server: EmployeeController.getAll
    })
    public getAll(requestParams: RequestParams): Observable<any> {
        return requestParams.request()
    }
    /**
     * 使用ID查询
     */
    @Request({
        server: EmployeeController.getById
    })
    public getById(requestParams: RequestParams): Observable<any> {
        return requestParams.request()
    }
    /**
     * 通过ID列表查询员工信息
     */
    @Request({
        server: EmployeeController.getEmployeeByIds
    })
    public getEmployeeByIds(requestParams: RequestParams): Observable<any> {
        return requestParams.request()
    }
    /**
     * 通过姓名和部门id查询
     */
    @Request({
        server: EmployeeController.getEmployeeIds
    })
    public getEmployeeIds(requestParams: RequestParams): Observable<any> {
        return requestParams.request()
    }
    /**
     * 使用部门ID查询用户列表
     */
    @Request({
        server: EmployeeController.getEmployeesByDepartmentId
    })
    public getEmployeesByDepartmentId(requestParams: RequestParams): Observable<any> {
        return requestParams.request()
    }
    /**
     * 使用部门ID列表查询用户列表
     */
    @Request({
        server: EmployeeController.getEmployeesByDepartmentIds
    })
    public getEmployeesByDepartmentIds(requestParams: RequestParams): Observable<any> {
        return requestParams.request()
    }
    /**
     * 使用ID查询数据库中的同步员工
     */
    @Request({
        server: EmployeeController.getLocalById
    })
    public getLocalById(requestParams: RequestParams): Observable<any> {
        return requestParams.request()
    }
    /**
     * 使用ID查询数据库中的同步员工和他所在的所有父部门
     */
    @Request({
        server: EmployeeController.getLocalByIdAndAllDepartment
    })
    public getLocalByIdAndAllDepartment(requestParams: RequestParams): Observable<any> {
        return requestParams.request()
    }
    /**
     * 使用部门ID查询员工列表包含子部门
     */
    @Request({
        server: EmployeeController.getLocalEmployeesByDepartmentId
    })
    public getLocalEmployeesByDepartmentId(requestParams: RequestParams): Observable<any> {
        return requestParams.request()
    }
    /**
     * 测试查看下一个工号
     */
    @Request({
        server: EmployeeController.getNextJobNumber
    })
    public getNextJobNumber(requestParams: RequestParams): Observable<any> {
        return requestParams.request()
    }
    /**
     * 重新初始化所有员工的工号
     */
    @Request({
        server: EmployeeController.initAllJobNumber
    })
    public initAllJobNumber(requestParams: RequestParams): Observable<any> {
        return requestParams.request()
    }
    /**
     * 通过姓名查询员工
     */
    @Request({
        server: EmployeeController.queryByName
    })
    public queryByName(requestParams: RequestParams): Observable<any> {
        return requestParams.request()
    }
    /**
     * 使用部门ID查询员工列表包含子部门
     */
    @Request({
        server: EmployeeController.queryEmployee
    })
    public queryEmployee(requestParams: RequestParams): Observable<any> {
        return requestParams.request()
    }
    /**
     * 通过部门列表查询员工
     */
    @Request({
        server: EmployeeController.queryEmployeesByeDepartments
    })
    public queryEmployeesByeDepartments(requestParams: RequestParams): Observable<any> {
        return requestParams.request()
    }
    /**
     * 重新生成员工工号（累加）
     */
    @Request({
        server: EmployeeController.reSetJobNumber
    })
    public reSetJobNumber(requestParams: RequestParams): Observable<any> {
        return requestParams.request()
    }
    /**
     * 设置工号
     */
    @Request({
        server: EmployeeController.setJobNumber
    })
    public setJobNumber(requestParams: RequestParams): Observable<any> {
        return requestParams.request()
    }
}
