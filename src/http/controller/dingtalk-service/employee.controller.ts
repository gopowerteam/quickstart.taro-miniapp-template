/**
 * This file is generated by the RequestConfigGenerator.
 * Do not edit.
 */
import { RequestMethod } from '@gopowerteam/http-request'

// 控制器名称
const controller = 'employee'
const service = 'xbt-platform-dingtalk-service'

export const EmployeeController = {
    // 查询全部员工(在职)
    getAll: {
        service,
        controller,
        path: '/api/employee/getAll',
        action: 'getAll',
        type: RequestMethod.Get
    },
    // 使用ID查询
    getById: {
        service,
        controller,
        path: '/api/employee/getById/{id}',
        action: 'getById',
        type: RequestMethod.Get
    },
    // 通过ID列表查询员工信息
    getEmployeeByIds: {
        service,
        controller,
        path: '/api/employee/getEmployeeByIds',
        action: 'getEmployeeByIds',
        type: RequestMethod.Post
    },
    // 通过姓名和部门id查询
    getEmployeeIds: {
        service,
        controller,
        path: '/api/employee/getEmployeeByNameAndDept',
        action: 'getEmployeeIds',
        type: RequestMethod.Post
    },
    // 使用部门ID查询用户列表
    getEmployeesByDepartmentId: {
        service,
        controller,
        path: '/api/employee/getEmployeesByDepartmentId/{id}',
        action: 'getEmployeesByDepartmentId',
        type: RequestMethod.Get
    },
    // 使用部门ID列表查询用户列表
    getEmployeesByDepartmentIds: {
        service,
        controller,
        path: '/api/employee/getEmployeesByDepartmentIds/{ids}',
        action: 'getEmployeesByDepartmentIds',
        type: RequestMethod.Get
    },
    // 使用ID查询数据库中的同步员工
    getLocalById: {
        service,
        controller,
        path: '/api/employee/getLocalById/{id}',
        action: 'getLocalById',
        type: RequestMethod.Get
    },
    // 使用ID查询数据库中的同步员工和他所在的所有父部门
    getLocalByIdAndAllDepartment: {
        service,
        controller,
        path: '/api/employee/getLocalByIdAndAllDepartment/{id}',
        action: 'getLocalByIdAndAllDepartment',
        type: RequestMethod.Get
    },
    // 使用部门ID查询员工列表包含子部门
    getLocalEmployeesByDepartmentId: {
        service,
        controller,
        path: '/api/employee/getLocalEmployeesByDepartmentId/{id}',
        action: 'getLocalEmployeesByDepartmentId',
        type: RequestMethod.Get
    },
    // 测试查看下一个工号
    getNextJobNumber: {
        service,
        controller,
        path: '/api/employee/getNextJobNumber',
        action: 'getNextJobNumber',
        type: RequestMethod.Get
    },
    // 重新初始化所有员工的工号
    initAllJobNumber: {
        service,
        controller,
        path: '/api/employee/initAllJobNumber',
        action: 'initAllJobNumber',
        type: RequestMethod.Post
    },
    // 通过姓名查询员工
    queryByName: {
        service,
        controller,
        path: '/api/employee/queryByName',
        action: 'queryByName',
        type: RequestMethod.Get
    },
    // 使用部门ID查询员工列表包含子部门
    queryEmployee: {
        service,
        controller,
        path: '/api/employee/queryEmployee',
        action: 'queryEmployee',
        type: RequestMethod.Get
    },
    // 通过部门列表查询员工
    queryEmployeesByeDepartments: {
        service,
        controller,
        path: '/api/employee/queryEmployeesByeDepartments',
        action: 'queryEmployeesByeDepartments',
        type: RequestMethod.Post
    },
    // 重新生成员工工号（累加）
    reSetJobNumber: {
        service,
        controller,
        path: '/api/employee/reSetJobNumber/{id}',
        action: 'reSetJobNumber',
        type: RequestMethod.Post
    },
    // 设置工号
    setJobNumber: {
        service,
        controller,
        path: '/api/employee/setJobNumber/{id}',
        action: 'setJobNumber',
        type: RequestMethod.Post
    }
}
